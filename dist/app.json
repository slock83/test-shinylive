[{"name": "app.py", "content": "import mimetypes\n\n\nfrom shiny import App, render, ui\nfrom shiny import Inputs, Outputs, Session\nimport plotly.offline as py\nimport plotly.graph_objects as go\nimport pandas as pd\n\nMAX_SIZE = 1000\n\napp_ui = ui.page_fluid(\n    ui.h3(\"Dataviz\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_file(\n                \"data_in\",\n                \"Ouvrir un fichier\",\n                button_label=\"Explorer...\",\n                placeholder=\"Aucun fichier choisi\",\n                multiple=True),\n        ),\n        ui.panel_main(\n            #ui.output_text_verbatim(\"file_content\"),\n            ui.output_ui(\"tst\")\n        )\n    )\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @output\n    @render.text\n    def file_content():\n        \n        file_infos = input.data_in()\n        if not file_infos:\n            return\n\n        # file_infos is a list of dicts; each dict represents one file. Example:\n        # [\n        #   {\n        #     'name': 'data.csv',\n        #     'size': 2601,\n        #     'type': 'text/csv',\n        #     'datapath': '/tmp/fileupload-1wnx_7c2/tmpga4x9mps/0.csv'\n        #   }\n        # ]\n        out_str = \"\"\n        for file_info in file_infos:\n            out_str += (\n                \"=\" * 47\n                + \"\\n\"\n                + file_info[\"name\"]\n                + \"\\nMIME type: \"\n                + str(mimetypes.guess_type(file_info[\"name\"])[0])\n            )\n            if file_info[\"size\"] > MAX_SIZE:\n                out_str += f\"\\nTruncating at {MAX_SIZE} bytes.\"\n\n            out_str += \"\\n\" + \"=\" * 47 + \"\\n\"\n\n            with open(file_info[\"datapath\"], \"r\") as f:\n                out_str += f.read(MAX_SIZE)\n\n        return out_str\n\n    @output\n    @render.ui\n    def tst():\n        file_infos = input.data_in()\n        if not file_infos:\n            return\n        for f in file_infos:\n            df = pd.read_csv(f[\"datapath\"])\n            df.index = df[df.columns[0]]\n            df = df[[x for x in df.columns[1:]]]\n        t = []\n        for col in df.columns:\n            t.append(go.Scatter(\n                x=df.index,\n                y=df[col],\n                name=col\n            ))\n        return ui.HTML(py.plot(t, output_type=\"div\"))\n\n\napp = App(app_ui, server)\n", "type": "text"}]